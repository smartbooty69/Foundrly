/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Notification = {
  _id: string;
  _type: "notification";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  recipient?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  type?: "follow" | "comment" | "reply" | "like" | "comment_like" | "report" | "mention" | "system";
  title?: string;
  message?: string;
  sender?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  startup?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "startup";
  };
  comment?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  actionUrl?: string;
  isRead?: boolean;
  readAt?: string;
  metadata?: {
    startupTitle?: string;
    commentText?: string;
    userName?: string;
    userImage?: string;
    reportReason?: string;
    reportStatus?: string;
    actionTaken?: string;
  };
};

export type ModerationActivity = {
  _id: string;
  _type: "moderationActivity";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  type?: "message_deleted" | "user_banned" | "warning_sent" | "report_created" | "comment_deleted" | "startup_banned";
  timestamp?: string;
  userId?: string;
  userName?: string;
  reason?: string;
  severity?: "low" | "medium" | "high" | "critical";
  itemId?: string;
  itemType?: string;
};

export type ModerationSettings = {
  _id: string;
  _type: "moderationSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  enabled?: boolean;
  severity?: "low" | "medium" | "high" | "critical";
  actions?: {
    profanity?: "warn" | "delete" | "ban" | "report";
    hateSpeech?: "warn" | "delete" | "ban" | "report";
    threats?: "warn" | "delete" | "ban" | "report";
    spam?: "warn" | "delete" | "ban" | "report";
    personalInfo?: "warn" | "delete" | "ban" | "report";
  };
  thresholds?: {
    messageLength?: number;
    repetitionCount?: number;
    capsRatio?: number;
    confidence?: number;
  };
  autoBan?: {
    enabled?: boolean;
    duration?: "1h" | "24h" | "7d" | "365d" | "perm";
    strikeThreshold?: number;
  };
  lastUpdated?: string;
};

export type Playlist = {
  _id: string;
  _type: "playlist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  select?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "startup";
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  name?: string;
  username?: string;
  email?: string;
  image?: string;
  bio?: string;
  followers?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  following?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  bannedUntil?: string;
  isBanned?: boolean;
  banHistory?: Array<{
    timestamp?: string;
    duration?: "1h" | "24h" | "7d" | "365d" | "perm";
    reason?: string;
    reportId?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "report";
    };
    strikeNumber?: number;
    _key: string;
  }>;
  strikeCount?: number;
  strikeSystem?: {
    isBanned?: boolean;
    bannedUntil?: string;
    strikeCount?: number;
    banHistory?: Array<{
      timestamp?: string;
      duration?: string;
      reason?: string;
      reportId?: string;
      strikeNumber?: number;
      _key: string;
    }>;
  };
};

export type Report = {
  _id: string;
  _type: "report";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  reportedType?: "startup" | "comment" | "user";
  reportedRef?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "startup";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  reason?: string;
  reportedBy?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  timestamp?: string;
  status?: "pending" | "reviewed" | "action-taken";
  banDuration?: "1h" | "24h" | "7d" | "365d" | "perm";
  adminNotes?: string;
  deleteComment?: boolean;
};

export type Comment = {
  _id: string;
  _type: "comment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  text?: string;
  createdAt?: string;
  startup?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "startup";
  };
  replies?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "comment";
  }>;
  likes?: number;
  dislikes?: number;
  likedBy?: Array<string>;
  dislikedBy?: Array<string>;
  parent?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  deleted?: boolean;
  bannedUntil?: string;
  isBanned?: boolean;
};

export type Startup = {
  _id: string;
  _type: "startup";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  views?: number;
  description?: string;
  category?: string;
  image?: string;
  pitch?: string;
  likes?: number;
  dislikes?: number;
  likedBy?: Array<string>;
  dislikedBy?: Array<string>;
  comments?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "comment";
  }>;
  bannedUntil?: string;
  isBanned?: boolean;
};

export type Markdown = string;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = Notification | ModerationActivity | ModerationSettings | Playlist | Author | Report | Comment | Startup | Markdown | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
