/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SearchEvent = {
  _id: string;
  _type: "searchEvent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: string;
  term?: string;
  timestamp?: string;
  userAgent?: string;
  ipAddress?: string;
  sessionId?: string;
};

export type StartupCommentEvent = {
  _id: string;
  _type: "startupCommentEvent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  startupId?: string;
  userId?: string;
  action?: "comment";
  timestamp?: string;
};

export type StartupDislikeEvent = {
  _id: string;
  _type: "startupDislikeEvent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  startupId?: string;
  userId?: string;
  action?: "dislike" | "undislike";
  timestamp?: string;
};

export type StartupLikeEvent = {
  _id: string;
  _type: "startupLikeEvent";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  startupId?: string;
  userId?: string;
  action?: "like" | "unlike";
  timestamp?: string;
};

export type InterestedSubmission = {
  _id: string;
  _type: "interestedSubmission";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  startup?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "startup";
  };
  startupTitle?: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  userId?: string;
  name?: string;
  email?: string;
  phone?: string;
  company?: string;
  role?: "investor" | "angel-investor" | "vc" | "founder" | "entrepreneur" | "advisor" | "mentor" | "employee" | "student" | "other";
  location?: string;
  investmentAmount?: string;
  investmentType?: "equity" | "loan" | "partnership" | "advisory" | "mentorship" | "collaboration" | "other";
  timeline?: "immediate" | "short-term" | "medium-term" | "long-term" | "exploring";
  preferredContact?: "email" | "phone" | "linkedin" | "any";
  linkedin?: string;
  website?: string;
  experience?: string;
  message?: string;
  howDidYouHear?: "search" | "social-media" | "referral" | "event" | "news" | "direct" | "other";
  consentToContact?: boolean;
  status?: "new" | "contacted" | "in-discussion" | "interested" | "not-interested" | "closed";
  notes?: string;
  submittedAt?: string;
};

export type AccountHistory = {
  _id: string;
  _type: "accountHistory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: string;
  userName?: string;
  changeType?: "name_change" | "bio_change" | "image_change" | "startup_created" | "startup_updated" | "startup_deleted" | "account_created" | "email_change" | "username_change" | "privacy_change";
  timestamp?: string;
  oldValue?: string;
  newValue?: string;
  startupId?: string;
  startupTitle?: string;
  changeDetails?: {
    field?: string;
    oldData?: string;
    newData?: string;
  };
  ipAddress?: string;
  userAgent?: string;
  sessionId?: string;
};

export type UserBadge = {
  _id: string;
  _type: "userBadge";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  user?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  badge?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "badge";
  };
  earnedAt?: string;
  progress?: {
    current?: number;
    target?: number;
    percentage?: number;
  };
  metadata?: {
    context?: string;
    relatedContent?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "startup";
    } | {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "comment";
    };
  };
};

export type Badge = {
  _id: string;
  _type: "badge";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  description?: string;
  category?: "creator" | "community" | "social" | "achievement" | "special";
  icon?: string;
  color?: string;
  rarity?: "common" | "uncommon" | "rare" | "epic" | "legendary";
  tier?: "bronze" | "silver" | "gold" | "platinum" | "diamond";
  criteria?: {
    type?: "count" | "streak" | "date" | "combination";
    target?: number;
    metric?: "startups_created" | "comments_posted" | "likes_received" | "followers_gained" | "users_followed" | "views_received" | "days_active" | "reports_submitted";
    timeframe?: "all_time" | "daily" | "weekly" | "monthly" | "yearly";
  };
  isActive?: boolean;
};

export type PushSubscription = {
  _id: string;
  _type: "pushSubscription";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  userId?: string;
  endpoint?: string;
  keys?: {
    p256dh?: string;
    auth?: string;
  };
  createdAt?: string;
  isActive?: boolean;
};

export type ModerationActivity = {
  _id: string;
  _type: "moderationActivity";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  type?: "message_deleted" | "user_banned" | "warning_sent" | "report_created" | "comment_deleted" | "startup_banned";
  timestamp?: string;
  userId?: string;
  userName?: string;
  reason?: string;
  severity?: "low" | "medium" | "high" | "critical";
  itemId?: string;
  itemType?: string;
};

export type ModerationSettings = {
  _id: string;
  _type: "moderationSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  enabled?: boolean;
  severity?: "low" | "medium" | "high" | "critical";
  actions?: {
    profanity?: "warn" | "delete" | "ban" | "report";
    hateSpeech?: "warn" | "delete" | "ban" | "report";
    threats?: "warn" | "delete" | "ban" | "report";
    spam?: "warn" | "delete" | "ban" | "report";
    personalInfo?: "warn" | "delete" | "ban" | "report";
  };
  thresholds?: {
    messageLength?: number;
    repetitionCount?: number;
    capsRatio?: number;
    confidence?: number;
  };
  autoBan?: {
    enabled?: boolean;
    duration?: "1h" | "24h" | "7d" | "365d" | "perm";
    strikeThreshold?: number;
  };
  lastUpdated?: string;
};

export type Playlist = {
  _id: string;
  _type: "playlist";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  select?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "startup";
  }>;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: string;
  name?: string;
  username?: string;
  email?: string;
  image?: string;
  bio?: string;
  followers?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  following?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "author";
  }>;
  savedBy?: Array<string>;
  bannedUntil?: string;
  isBanned?: boolean;
  banHistory?: Array<{
    timestamp?: string;
    duration?: "1h" | "24h" | "7d" | "365d" | "perm";
    reason?: string;
    reportId?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "report";
    };
    strikeNumber?: number;
    _key: string;
  }>;
  strikeCount?: number;
  strikeSystem?: {
    isBanned?: boolean;
    bannedUntil?: string;
    strikeCount?: number;
    banHistory?: Array<{
      timestamp?: string;
      duration?: string;
      reason?: string;
      reportId?: string;
      strikeNumber?: number;
      _key: string;
    }>;
  };
};

export type Report = {
  _id: string;
  _type: "report";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  reportedType?: "startup" | "comment" | "user";
  reportedRef?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "startup";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  } | {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  reason?: string;
  reportedBy?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  timestamp?: string;
  status?: "pending" | "reviewed" | "action-taken";
  banDuration?: "1h" | "24h" | "7d" | "365d" | "perm";
  adminNotes?: string;
  deleteComment?: boolean;
};

export type Comment = {
  _id: string;
  _type: "comment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  text?: string;
  createdAt?: string;
  startup?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "startup";
  };
  replies?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "comment";
  }>;
  likes?: number;
  dislikes?: number;
  likedBy?: Array<string>;
  dislikedBy?: Array<string>;
  parent?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "comment";
  };
  deleted?: boolean;
  bannedUntil?: string;
  isBanned?: boolean;
};

export type Startup = {
  _id: string;
  _type: "startup";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  views?: number;
  description?: string;
  category?: string;
  image?: string;
  pitch?: string;
  likes?: number;
  dislikes?: number;
  likedBy?: Array<string>;
  dislikedBy?: Array<string>;
  comments?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "comment";
  }>;
  bannedUntil?: string;
  isBanned?: boolean;
  buyMeACoffeeUsername?: string;
  savedBy?: Array<string>;
  interestedBy?: Array<string>;
};

export type Markdown = string;

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = SearchEvent | StartupCommentEvent | StartupDislikeEvent | StartupLikeEvent | InterestedSubmission | AccountHistory | UserBadge | Badge | PushSubscription | ModerationActivity | ModerationSettings | Playlist | Author | Report | Comment | Startup | Markdown | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
